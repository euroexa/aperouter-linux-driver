#!/usr/bin/env python

##
## This file is part of the APErouter tools stack.
## Copyright (C) 2017 INFN APE Lab.
##
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

import json
from sys import exit
import argparse

import ape_utils

karma_regs = "/proc/karmadev/regs"
json_regs = "../../ExaNIP/registers.txt"

# parse command line arguments
parser = argparse.ArgumentParser()
parser.add_argument("register", nargs="*", help = "print info just for specified register")
parser.add_argument("--dump-address", help = "dump register name and address", action = "store_true")
parser.add_argument("--dump-header", help = "dump C preprocessor header", action = "store_true")
parser.add_argument("--dump-html", help = "dump the json rapresentation as an html table", action = "store_true")
parser.add_argument("-s", "--short", help = "don't print subfields information", action = "store_true")
parser.add_argument("-f", "--file", nargs=1, help = "file to parse (default {})".format(karma_regs))
parser.add_argument("-r", "--register-txt", nargs=1, help = "register definition file (default {})".format(json_regs))
parser.add_argument("-g", "--generate", nargs=1, help = "generate register definition file from yaml configuration")
args = parser.parse_args()

if args.generate:
    ape_utils.parse_yaml(args.generate[0])
    exit()

# load json file
if args.file:
    karma_regs = args.file[0]
if args.register_txt:
    json_regs = args.register_txt[0]

with open(json_regs, "r") as f:
    registers = json.load(f)

if args.dump_address:
    ape_utils.print_address(registers)
    exit()

elif args.dump_header:
    ape_utils.print_header(registers)
    exit()

elif args.dump_html:
    import json2html
    table_attributes = 'border="2" cellpadding="5" style="border-collapse:collapse;"'
    print json2html.Json2Html().convert(json = registers, table_attributes = table_attributes)
    exit()

with open(karma_regs, "r") as f:
    karma_proc = f.readlines()
for line in karma_proc:
    num, val = ape_utils.parse_register(line)

    if num not in registers:
        if int(val, 16) != 0:
            print("Cannot find reg[{}]={}".format(num, val))
        continue

    if args.register and num not in args.register: continue

    ape_utils.print_register(num, registers[num], val, short=args.short)
